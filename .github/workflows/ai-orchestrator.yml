name: AI Orchestrator

on:
  issues:
    types: [opened, edited, labeled]
  pull_request:
    types: [opened, edited, labeled]

jobs:
  triage:
    runs-on: ubuntu-latest
    outputs:
      assigned_labels: ${{ steps.assign-labels.outputs.assigned_labels }}
      requires_agents: ${{ steps.needs-agents.outputs.requires_agents }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Assign AI agent labels
        id: assign-labels
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueBody = context.payload.issue ? context.payload.issue.body : 
                              (context.payload.pull_request ? context.payload.pull_request.body : '');
            const issueTitle = context.payload.issue ? context.payload.issue.title :
                               (context.payload.pull_request ? context.payload.pull_request.title : '');
            
            // Mapping of keywords to labels
            const labelMappings = {
              'documentation': 'ai:docs',
              'docs': 'ai:docs',
              'readme': 'ai:docs',
              'test': 'ai:test',
              'testing': 'ai:test',
              'unittest': 'ai:test',
              'optimize': 'ai:optimize',
              'performance': 'ai:optimize',
              'feature': 'ai:feature',
              'implement': 'ai:feature',
              'review': 'ai:review',
              'security': 'ai:security',
              'vulnerability': 'ai:security'
            };
            
            // Find labels based on content
            const fullText = \`\${issueTitle} \${issueBody}\`.toLowerCase();
            const assignedLabels = [];
            
            Object.entries(labelMappings).forEach(([keyword, label]) => {
              if (fullText.includes(keyword.toLowerCase())) {
                if (!assignedLabels.includes(label)) {
                  assignedLabels.push(label);
                }
              }
            });
            
            // Output labels
            const labelsStr = assignedLabels.join(',');
            core.setOutput('assigned_labels', labelsStr);
            console.log(\`Assigned labels: \${labelsStr || 'none'}\`);
      
      - name: Check if agents are needed
        id: needs-agents
        run: |
          echo "Checking if specialized agents are needed"
          LABELS="${{ steps.assign-labels.outputs.assigned_labels }}"
          
          if [ -n "$LABELS" ]; then
            echo "requires_agents=true" >> $GITHUB_OUTPUT
            echo "Specialized agents will be activated"
          else
            echo "requires_agents=false" >> $GITHUB_OUTPUT
            echo "No specialized agents needed"
          fi
  
  setup-shared-context:
    needs: [triage]
    if: needs.triage.outputs.requires_agents == 'true'
    runs-on: ubuntu-latest
    outputs:
      context-key: ${{ steps.create-context.outputs.context-key }}
    
    steps:
      - name: Create shared context
        id: create-context
        run: |
          echo "Creating shared context for agents"
          CONTEXT_KEY="context-${{ github.run_id }}-${{ github.run_number }}"
          echo "context-key=$CONTEXT_KEY" >> $GITHUB_OUTPUT
          
          mkdir -p .task-context
          echo '{
            "issue_number": "${{ github.event.issue.number || github.event.pull_request.number }}",
            "repository": "${{ github.repository }}",
            "run_id": "${{ github.run_id }}",
            "labels": "${{ needs.triage.outputs.assigned_labels }}",
            "agent_status": {},
            "agent_results": {}
          }' > .task-context/context.json
          
          echo "Shared context created with key: $CONTEXT_KEY"
      
      - name: Cache shared context
        uses: actions/cache/save@v3
        with:
          path: .task-context
          key: ${{ steps.create-context.outputs.context-key }}
  
  notify-agents:
    needs: [triage, setup-shared-context]
    if: needs.triage.outputs.requires_agents == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Check for documentation needs
        if: contains(needs.triage.outputs.assigned_labels, 'ai:docs')
        run: |
          echo "ðŸš€ Triggering documentation agent"
          # In a real implementation, would trigger another workflow here
      
      - name: Check for testing needs
        if: contains(needs.triage.outputs.assigned_labels, 'ai:test')
        run: |
          echo "ðŸš€ Triggering testing agent"
          # In a real implementation, would trigger another workflow here
      
      - name: Check for optimization needs
        if: contains(needs.triage.outputs.assigned_labels, 'ai:optimize')
        run: |
          echo "ðŸš€ Triggering optimization agent"
          # In a real implementation, would trigger another workflow here
      
      - name: Check for feature implementation needs
        if: contains(needs.triage.outputs.assigned_labels, 'ai:feature')
        run: |
          echo "ðŸš€ Triggering feature agent"
          # In a real implementation, would trigger another workflow here
      
      - name: Check for review needs
        if: contains(needs.triage.outputs.assigned_labels, 'ai:review')
        run: |
          echo "ðŸš€ Triggering review agent"
          # In a real implementation, would trigger another workflow here
      
      - name: Check for security needs
        if: contains(needs.triage.outputs.assigned_labels, 'ai:security')
        run: |
          echo "ðŸš€ Triggering security agent"
          # In a real implementation, would trigger another workflow here
  
  collect-results:
    needs: [triage, setup-shared-context, notify-agents]
    if: always() && needs.triage.outputs.assigned_labels != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore shared context
        uses: actions/cache/restore@v3
        with:
          path: .task-context
          key: ${{ needs.setup-shared-context.outputs.context-key }}

      - name: Wait for agent completion
        id: wait-for-agents
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install GitHub Actions Core
        run: npm install @actions/core

      - name: Run agent waiting script
        id: wait-agents-script
        env:
          GITHUB_CONTEXT_ISSUE: ${{ toJSON(github.event.issue) }}
          GITHUB_CONTEXT_PR: ${{ toJSON(github.event.pull_request) }}
          ASSIGNED_LABELS: ${{ needs.triage.outputs.assigned_labels }}
          CONTEXT_KEY: ${{ needs.setup-shared-context.outputs.context-key }}
        run: node .github/scripts/wait-for-agents.js

      - name: Aggregate agent results
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Run results aggregation script
        id: aggregate-results
        env:
          GITHUB_CONTEXT_ISSUE: ${{ toJSON(github.event.issue) }}
          GITHUB_CONTEXT_PR: ${{ toJSON(github.event.pull_request) }}
          ASSIGNED_LABELS: ${{ needs.triage.outputs.assigned_labels }}
          CONTEXT_KEY: ${{ needs.setup-shared-context.outputs.context-key }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: node .github/scripts/aggregate-results.js
