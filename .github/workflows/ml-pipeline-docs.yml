name: ML Pipeline & Documentation

on:
  push:
    branches: [main, develop]
    paths: ['src/**', 'tests/**', 'pyproject.toml', '.github/workflows/**']
  pull_request:
    branches: [main]
    paths: ['src/**', 'tests/**', 'pyproject.toml']
  workflow_dispatch:

jobs:
  testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run tests with coverage
        run: |
          PYTHONPATH=src poetry run pytest --cov=src/instagram_analyzer --cov-report=xml --cov-report=html
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  ml-pipeline:
    runs-on: ubuntu-latest
    needs: [testing]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Run ML pipeline
        run: |
          PYTHONPATH=src poetry run python -c "
          from instagram_analyzer.ml.pipeline import MLPipeline
          print('Initializing ML Pipeline...')
          pipeline = MLPipeline()
          print('Running ML Pipeline...')
          # pipeline.run()  # Uncomment when ready
          print('ML Pipeline completed successfully')
          "
      - name: Upload trained models
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/
          retention-days: 5

  docs:
    runs-on: ubuntu-latest
    needs: [testing, ml-pipeline]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install docs dependencies
        run: |
          poetry install --no-interaction --with docs
      - name: Setup Sphinx docs
        run: |
          mkdir -p docs/source docs/build
          if [ ! -f docs/source/conf.py ]; then
            poetry run sphinx-quickstart --quiet --project="Instagram Analyzer" \
              --author="Instagram Analyzer Team" --release="1.0" --language="en" \
              --sep --ext-autodoc --ext-viewcode --ext-napoleon docs/
          fi
      - name: Build documentation
        run: |
          PYTHONPATH=src poetry run sphinx-apidoc -o docs/source/modules src/instagram_analyzer --separate --force
          PYTHONPATH=src poetry run sphinx-build -b html docs/source docs/build
      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build
          destination_dir: docs
          full_commit_message: "docs: update documentation [skip ci]"

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy file system scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Install dependencies
        run: poetry install --no-interaction --with security
      - name: Run quality checks
        run: |
          PYTHONPATH=src poetry run make quality || true
      - name: Python specific security audit
        run: |
          echo "## 🛡️ Python Security Audit" > security-report.md
          echo "### Quality checks (make quality):" >> security-report.md
          echo '```' >> security-report.md
          PYTHONPATH=src poetry run make quality >> security-report.md 2>&1 || true
          echo '```' >> security-report.md
          echo "### Dependency vulnerability scan:" >> security-report.md
          echo '```' >> security-report.md
          poetry export -f requirements.txt --output requirements.txt
          poetry run safety check -r requirements.txt >> security-report.md 2>&1 || true
          echo '```' >> security-report.md
          echo "### Code security scan:" >> security-report.md
          echo '```' >> security-report.md
          poetry run bandit -r src/instagram_analyzer/ >> security-report.md 2>&1 || true
          echo '```' >> security-report.md
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
